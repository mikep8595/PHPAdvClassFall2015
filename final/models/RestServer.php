<?php

/**
 * RestServer contains all functions needed for Rest capabilites
 * such as status updating, error checking, and managing all of the JSON.
 *
 * @author Mike
 */

//TODO:
class RestServer {   
    
    /*Variables: Contains variables for the current status as well as for all the status codes, the response message format  
     *for the final reponse.
     * also contains private variables for the id, resource type, verb type, and all the server data AKA JSON  
     */
    private $status = 200; //lets you know protocol of the page.
    private $status_codes = array(  
        200 => 'OK',
        201 => 'Created',
        202 => 'Accepted',
        400 => 'Bad Request',
        401 => 'Unauthorized',
        403 => 'Access Forbidden',
        404 => 'Not Found',
        409 => 'Conflict',
        500 => 'Internal Server Error',
    );
    private $response = array(       
        "message" => NULL,
        "errors" => NULL,
        "data" => NULL
    );
    private $id;
    private $resource;
    private $verb;
    private $server_data;
    
    //function for getting the server data
    function getServer_data() {
        return $this->server_data;
    }

    //The server data's set function contains the code used to break down the JSON object generated by the main page
    private function setServer_data() {
        if( strpos(filter_input(INPUT_SERVER, 'CONTENT_TYPE'), "application/json") !== false) {
            $this->server_data = json_decode(trim(file_get_contents('php://input')), true);

        //switch used for JSON errors.
        switch ( json_last_error() ) {
                case JSON_ERROR_NONE:
                { //data UTF-8 compliant
                  //tell client to recieve JSON data and send           
                }
                break;
                case JSON_ERROR_SYNTAX:
                case JSON_ERROR_UTF8:
                case JSON_ERROR_DEPTH:
                case JSON_ERROR_STATE_MISMATCH:
                case JSON_ERROR_CTRL_CHAR:
                    throw new Exception(json_last_error_msg());           
                break;
                default:
                   throw new Exception('JSON encode error Unknown error');
                break;
        }               
        }    
    }

    //get for the ID    
    public function getId() {
        return $this->id;
    }
    
    //get for the Resource
    public function getResource() {
        return $this->resource;
    }
    
    //get for the Status
    function getStatus() {
        return $this->status;
    }
    
    //get for the Verb
    function getVerb() {
        return $this->verb;
    }

    //Sets the verb based on what input method was selected in the dropdown menu
    private function setVerb() {
        $this->verb = filter_input(INPUT_SERVER, 'REQUEST_METHOD');
        $verbs_allowed = array('GET','POST','PUT','DELETE');
        //Above are all the allowed verbs.

        //in the case of an unexpected verb somehow, an exception is thrown.
        if ( !in_array($this->verb, $verbs_allowed) ) {
            throw new Exception("Unexpected Header Requested ". $this->verb);
        }        
    }
    
    
    //Sets the status based on if an exception is thrown anywhere in the code.
    function setStatus($status) {       
        if (!array_key_exists($status, $this->status_codes)){
        
            throw new Exception('Not Valid Status' . $status);
        }
        else {
            $this->status = $status;
        }
    }
    
    
    //set used for the message section of the response
    public function setMessage($message) {
        $this->response["message"] = $message;
    }
    
    //set used for the error section of the response
    public function setError($error) {
        $this->response["error"] = $error;
    }
    
    //set used for the data section of the response
    public function setData($data) {
        $this->response["data"] = $data;
    }

    //constuct used at the initialization of the RestServer. Contains the rest arguments call as well as the location of 
    //set verb and server data function
    public function __construct() {
        header("Access-Control-Allow-Orgin: *"); //who is allowed to access this page
        header("Access-Control-Allow-Methods: GET, POST, UPDATE, DELETE");
        header("Content-Type: application/json; charset=utf8"); //will be outputing json
        $this->getRestArgs();
        $this->setVerb();
        $this->setServer_data();
    }   
    
    //The getRestArgs function retrieves that id if one was given by disecting the endpoint.
    private function getRestArgs() {
        $endpoint = filter_input(INPUT_GET, 'endpoint');
        $restArgs = explode('/', rtrim($endpoint, '/'));    
        $this->resource = array_shift($restArgs);
        $this->id = NULL;
        
        if ( isset($restArgs[0]) && is_numeric($restArgs[0]) ) {
            $this->id = intval($restArgs[0]);
        }
    }
    
    //response output by the rest server.
    public function outputResponse(){
        header("HTTP/1.1 " . $this->getStatus() . " " . $this->status_codes[$this->getStatus()]);
        echo json_encode($this->response, JSON_PRETTY_PRINT);        
    }

}
